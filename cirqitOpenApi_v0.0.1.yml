openapi: 3.0.3
info:
  title: cirQit OpenAPI
  version: 0.0.1
  description: openAPI for REST communication with the cirQit application
  contact:
    email: info@cirqit.cloud
    name: cirQit
    url: https://www.cirqit.cloud
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://cirqit.cloud/wp-content/uploads/2021/01/cirQit_kp_200x80.png
  x-visibility: public

servers:
  - url: https://472d09ov47.execute-api.eu-central-1.amazonaws.com
    description: Development API-Gateway
    variables: { }
  - url: https://api.github.com/api
    description: Productive CloudFront access
    variables: { }
tags:
  - name: Auth
    description: the Authorization process
  - name: Company
    description: Operations to get the Company data
  - name: Tree
    description: Operations regarding the Directory Tree
  - name: Installation
    description: Operations create and modify a installation
  - name: Schema
    description: Operations related to the schema editable document
  - name: Attachment
    description: Operations related to the additional documents of a Installation
#  - name: Logbook
#    description: Operations to download the logbook of an Installation in csv format (NOT YET DEFINED)


paths:
  # auth-token - PostJWTFunction
  /auth/access-token:
    post:
      tags:
        - Auth
      summary: Request a new access token using a refresh token
      description: This endpoint allows you to request a short-living access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTAccessTokenRequest'
      responses:
        "200":
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAccessToken'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  # Company - GetCompanyFunction
  /rest/openapi/document/v1/company/{companyName}:
    get:
      tags:
        - Company
      operationId: getCompany
      summary: get the Company data
      description: get the properties of the Company
      parameters:
        - name: companyName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        # NOTE: the API is called by a GET, but we forward a POST to the Lambda because the API-Gateway adds some information
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  # Tree - GetTreeFunction
  /rest/openapi/document/v1/tree:
    get:
      tags:
        - Tree
      operationId: getDirectoryTree
      summary: list all the available directories
      description: get the listing with all the directories and subdirectories
      responses:
        "200":
          description: DirectoryTree.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryTree'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy
  # Tree / Directory - CreateDirectoryFunction
  /rest/openapi/document/v1/tree/{parentId}:
    post:
      tags:
        - Tree
      operationId: createDirectory
      summary: create a directory
      description: create a directory in the tree.
      parameters:
        - name: parentId
          description: the parent directory
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Directory'
      responses:
        "201":
          description: the created directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError409'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  # Installation - CreateInstallationFunction
  /rest/openapi/document/v1/installation:
    post:
      tags:
        - Installation
      operationId: createInstallation
      summary: create a installation in the given directory
      description: get the installation data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Installation'
      responses:
        "201":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError409'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  # Installation - AnyInstallationFunction
  /rest/openapi/document/v1/installation/{installationId}:
    get:
      tags:
        - Installation
      operationId: getInstallation
      summary: get the data of the installation
      description: get the instance of the installation for the given ID
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    put:
      tags:
        - Installation
      operationId: putInstallation
      summary: overwrite the data of the installation
      description: modify the installation data with a full object
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Installation'
      responses:
        "200":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    delete:
      tags:
        - Installation
      operationId: deleteInstallation
      summary: delete the installation
      description: purges the installation from cirQit
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: json
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  # Schema - SchemaFunction
  /rest/openapi/document/v1/installation/{installationId}/schema:
    get:
      tags:
        - Installation
      operationId: getSchema
      summary: get the signed URL to download the schema
      description: the signed URL is used to download the schema from the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: temporary valid signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    put:
      tags:
        - Installation
      operationId: getSchemaUpload
      summary: get the signed URL to upload the schema
      description: the signed URL is used to upload the schema to the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: temporary valid signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  # Attachment - AttachmentFunction
  /rest/openapi/document/v1/installation/{installationId}/attachment:
    get:
      tags:
        - Attachment
      operationId: getList
      summary: list the available documents
      description: get the listing of the documents for the given installationId
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  # FIXME: ja oder nein, ich denke nicht das wir jemals mehr als 100 items haben werden...
                  # - pagination
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentMetadata'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    post:
      tags:
        - Attachment
      operationId: uploadDocument
      summary: get the signed URL to upload the Attachment
      description: the signed URL is used to upload the attachment to the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
        - name: filePath
          in: path
          required: true
          schema:
            # FIXME: ich kann ein /directoryName/filename.pdf haben, oder nur filename.pdf
            #             wie escape ich den pfad? URL encoded?
            type: string
      responses:
        "200":
          description: temporary valid signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError409'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  /rest/openapi/document/v1/installation/{installationId}/attachment/{filePath}:
    put:
      tags:
        - Attachment
      operationId: overwriteDocument
      summary: get the signed URL to update a existing document
      description: the signed URL is used to update the attachment in the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
        - name: filePath
          in: path
          required: true
          description: URL encoded Path to the file, including folders and subfolders
          schema:
            type: string
            example: folder%2Fsubfolder%2Ffilename.pdf
      responses:
        "200":
          description: created signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    delete:
      tags:
        - Attachment
      operationId: deleteDocument
      summary: get the signed URL to delete a existing document
      description: the signed URL is used to delete the attachment in the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
        - name: filePath
          in: path
          required: true
          description: URL encoded Path to the file, including folders and subfolders
          schema:
            type: string
            example: folder%2Fsubfolder%2Ffilename.pdf
      responses:
        "200":
          description: created signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


components:
  schemas:
    JWTAccessTokenRequest:
      type: object
      required:
        - jwtRefreshToken
        - clientId
        - scope
      properties:
        jwtRefreshToken:
          type: string
          description: The refresh token
          example: your-refresh-token
        clientId:
          type: string
          description: The ID of the requesting application
          example: ElektroForm Solar
        scope:
          type: string
          description: The scope of the access token
          example: cirqit/read cirqit/write
    JWTAccessToken:
      type: string
      description: The JWT Token
      example: your-new-JWT-access-token

    IdSchema:
      type: string
      pattern: '^[A-Z0-9]{5}-[A-Z0-9]{5}$'
      example: ABCDE-12345

    Company:
      type: object
      required:
        - companyName
      properties:
        companyName:
          type: string
          example: Example Ltd.
        addition:
          type: string
          example: Postfach
        street:
          type: string
          example: die strasse
        postalCode:
          type: string
          example: 8400
        city:
          type: string
          example: Winterthur
        country:
          type: string
          example: Schweiz
        phone:
          type: string
          example: 0785556677
        email:
          type: string
          format: email
          example: info@example.com
        website:
          type: string
          example: www.example.com

    Directory:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Project on the street
        description:
          type: string
          example: a description of the directory
        accountId:
          type: string
          readOnly: true
          example: mario
        role:
          type: string
          readOnly: true
          example: ADMINISTRATOR
        id:
          type: string
          readOnly: true
          example: FGHIJ-67890

    DirectoryTree:
      allOf:
        - $ref: '#/components/schemas/Directory'
        - type: object
          properties:
            children:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Installation'
                  - $ref: '#/components/schemas/DirectoryTree'

    Installation:
      type: object
      required:
        - licenseType
        - commission
        - name
      properties:
        name:
          type: string
          example: 2737_H1 Pelletanlage Hauptsteuerung Silosteuerung_V004
        description:
          type: string
          example: 2737_H1 Pelletanlage Hauptsteuerung Silosteuerung_V004
        licenseType:
          type: string
          example: public
        commission:
          type: string
          example: Hase
        address:
          type: string
          example: 82256 Fürstenfeldbruck, Deutschland
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 48.17394
            longitude:
              type: number
              format: float
              example: 11.243008
        id:
          type: string
          readOnly: true
          example: ABCDE-12345
        companyName:
          type: string
          readOnly: true
          example: Huber AG
        rootId:
          type: string
          readOnly: true
          example: FGHIJ-56789
        parentId:
          type: string
          readOnly: true
          example: KLMNO-98765
        accountId:
          type: string
          readOnly: true
          example: mario
        role:
          type: string
          readOnly: true
          example: ADMIN
        createdDate:
          type: string
          readOnly: true
          format: date-time
          description: Creation date in the cirQit environment of the installation in ISO 8601 format "YYYY-MM-DDTHH:MM:SS".
          example: 2023-09-05T21:12:18

    DocumentMetadata:
      type: object
      required:
        - fileName
      properties:
        fileName:
          type: string
          description: alphanumeric name of the document.
          example: my-file.txt
        displayName:
          type: string
          description: display name of the document.
          example: My File
        locked:
          type: boolean
          description: if the document is visible for the administrator only
          example: true
        version:
          type: string
          readOnly: true
          description: the version of the document in the cirQit environment
          example: abcd1234EFGH5678jklm
        installationId:
          type: string
          readOnly: true
          description: installationID related to the document.
          example: ABCDE-12345
        path:
          type: string
          description: slash delimited path of the directory where the document is stored.
          example: folder/subfolder1/subfolder2
        creationDate:
          type: string
          format: date-time
          description: Creation date in the cirQit environment of the document in ISO 8601 format "YYYY-MM-DDTHH:MM:SS".
          example: 2023-09-05T21:12:18
        mimeType:
          type: string
          description: Mime type of the document.
          example: application/pdf

    SignedUrl:
      type: object
      required:
        - signedUrl
      properties:
        name:
          type: string
          example: https://app.cirqit.cloud/data/anlage/MHXKN-XSDUA/pdf/schema.pdf?Expires=173xxxx&Signature=1iOxxxx&Key-Pair-Id=K2Gxxxx
          description: get the signed URL to communicate with the AWS S3 bucket store




    Empty:
      title: Empty Schema
      type: object

    CirQitError:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
          example: VALIDATION_ERROR
          description: Unique error code.
        errorMessage:
          type: string
          example: Input validation failed
          description: Short description of the error.
        errorReasons:
          type: array
          items:
            type: object
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Attribute 'xxxx' must not be longer than 50 chars.
              code:
                type: string
                example: ERROR_012
                description: Unique reason code for this specific reason.
              location:
                type: string
                example: /rootLevel/xxxx
                description: Location within message where the error is related to.
          description: >-
            List of error reasons if multiple reasons are related to the same error.
  
  

  responses:
    CirQitError400:
      description: Bad request, e.g. missing or invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError401:
      description: Unauthorized, no access to the requested url / resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError403:
      description: Forbidden, no access to the resource object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError404:
      description: Requested resource is not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError405:
      description: Path or HTTP method not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError409:
      description: Resource already registered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError500:
      description: Server error, e.g. internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'

  parameters: { }
externalDocs:
  description: Developer documentation for cirQit OpenAPI
  url: https://www.cirqit.cloud/openAPI
