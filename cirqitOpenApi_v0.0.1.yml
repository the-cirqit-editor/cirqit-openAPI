openapi: 3.0.3
info:
  title: cirQit OpenAPI
  version: 0.0.1
  description: openAPI for REST communication with the cirQit application
  contact:
    email: info@cirqit.cloud
    name: cirQit
    url: https://www.cirqit.cloud
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://cirqit.cloud/wp-content/uploads/2021/01/cirQit_kp_200x80.png
  x-visibility: public

servers:
  - url: https://c9nc9jotk8.execute-api.eu-central-1.amazonaws.com/api
    description: Development API-Gateway
    variables: { }
  - url: https://d3kqo5uf0sz7wm.cloudfront.net/api
    description: Development Cloudfront
    variables: { }
  - url: https://api-dev.cirqit.cloud
    description: Development OpenAPI access
    variables: { }
  - url: https://api-test.cirqit.cloud
    description: Test OpenAPI access
    variables: { }
  - url: https://api.cirqit.cloud
    description: Prod OpenAPI access
    variables: { }
tags:
  - name: OAuth2
    description: the Authorization process
  - name: Company
    description: Operations to get the Company data
  - name: Tree
    description: Operations regarding the Directory Tree
  - name: Installation
    description: Operations create and modify a installation
  - name: Document
    description: Operations related to the documents of a Installation
#  - name: Logbook
#    description: Operations to download the logbook of an Installation in csv format (NOT YET DEFINED)


paths:
  #  ################################################### #
  #  #                                AUTHENTICATION                                            # #
  #  ################################################### #
  /oauth2/token:
    post:
      tags:
        - OAuth2
      operationId: getJWTAccessToken
      summary: Get authentication token with ClientID and Secret
      description: Obtain an authentication token by providing the ClientID and Secret (https://oauth.net/2/client-authentication/)
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  example: your-client-id
                  description: the user which has obtained the client secret from the cirQit application
                client_secret:
                  type: string
                  example: your-client-secret
                  description: the user secret which is provided by the cirQit application
                scope:
                  type: string
                  example: cirqit/read cirqit/write
                  description: the scope of the access token
      responses:
        '200':
          description: Authentication token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The access token string as issued by the authorization server.
                    example: your jwt access-token (ey....)
                  token_type:
                    type: string
                    description: the type of token this is, typically just the string “Bearer”.
                    example: your jwt access-token (ey....)
                  expires_in:
                    type: string
                    description: the time in seconds when this token expires
                    example: 876543
                  scope:
                    type: string
                    description: the scope of the access token
                    example: your jwt access-token (ey....)
        "401":
          $ref: '#/components/responses/CirQitError401'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: FormBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  /oauth2/verify:
    post:
      tags:
        - OAuth2
      operationId: verifyAuthToken
      summary: Verify authentication token
      description: |
        Verify the provided authentication token similar to a introspect endpoint (https://oauth.net/2/token-introspection/).
        This endpoint should be used if you need to validate your token. It is not required for the normal operation of the API.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: your-access-token
      responses:
        '200':
          description: Token verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                    description: The token is valid
                  token_type:
                    type: string
                    description: the type of token this is, typically just the string “Bearer”.
                    example: your jwt access-token (ey....)
                  expires_in:
                    type: number
                    description: the time in seconds when this token expires
                    example: 876543
                  expire_date:
                    type: string
                    format: date-time
                    description: the human readable date when this token expires
                    example: "2023-09-05T21:12:18"
                  scope:
                    type: string
                    description: the scope of the access token
                    example: cirqit/read cirqit/write
        "401":
          $ref: '#/components/responses/CirQitError401'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: FormBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  #  ################################################### #
  #  #                                COMPANY                                                         # #
  #  ################################################### #
  /rest/v1/company:
    get:
      tags:
        - Company
      operationId: getCompany
      summary: get the Company data
      description: get the properties of the users Company
      responses:
        "200":
          description: Company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        # NOTE: the API is called by a GET, but we forward a POST to the Lambda because the API-Gateway adds some information
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  #  ################################################### #
  #  #                                Directory and Tree                                             # #
  #  ################################################### #
  # Tree / Directory - GetDirectoryTreeFunction
  /rest/v1/directoryTree:
    get:
      tags:
        - Tree
      operationId: getDirectoryTree
      summary: list all the available directories
      description: get the listing with all the directories and subdirectories
      responses:
        "200":
          description: the tree of directories with the children
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Directory'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  /rest/v1/directory:
    post:
      tags:
        - Tree
      operationId: createDirectory
      summary: create a directory
      description: create a directory in the tree.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Directory'
      responses:
        "201":
          description: the created directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError409'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  #  Directory - DirectoryFunction
  /rest/v1/directory/{directoryId}:
    get:
      tags:
        - Tree
      operationId: getDirectory
      summary: get a directory
      description: get the directory with the given Id.
      parameters:
        - name: directoryId
          description: the ID of the directory
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: the directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError409'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  #  ################################################### #
  #  #                                INSTALLATION                                                  # #
  #  ################################################### #
  # Installation - CreateInstallationFunction
  /rest/v1/installation:
    post:
      tags:
        - Installation
      operationId: createInstallation
      summary: create a installation in the given directory
      description: get the installation data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Installation'
      responses:
        "201":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError409'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  # Installation - AnyInstallationFunction
  /rest/v1/installation/{installationId}:
    get:
      tags:
        - Installation
      operationId: getInstallation
      summary: get the data of the installation
      description: get the instance of the installation for the given ID
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    put:
      tags:
        - Installation
      operationId: putInstallation
      summary: overwrite the data of the installation
      description: modify the installation data with a full object
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Installation'
      responses:
        "200":
          description: installation data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Installation'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

    delete:
      tags:
        - Installation
      operationId: deleteInstallation
      summary: delete the installation
      description: purges the installation from cirQit
      parameters:
        - name: installationId
          description: The ID of the  installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: string
                format: json
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-request-validator: JsonBodyValidation
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


  #  ################################################### #
  #  #                                DOCUMENT                                                       # #
  #  ################################################### #
  # Document - DocumentFunction
  /rest/v1/installation/{installationId}/listDocuments:
    get:
      tags:
        - Document
      operationId: getDocumentList
      summary: list the available documents
      description: get the listing of the documents for the given installationId
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentMetadata'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError404'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy

  /rest/v1/installation/{installationId}/getDocumentUrl:
    post:
      tags:
        - Document
      operationId: getSignedDocumentUrl
      summary: get the signed URL to upload an Document
      description: the signed URL is used to upload the Document to the AWS S3 bucket in your next step
      parameters:
        - name: installationId
          description: Filter results to match a given installation
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdSchema'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        "200":
          description: temporary valid signed URL to communicate with AWS S3 object store.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    $ref: '#/components/schemas/SignedUrl'
        "400":
          $ref: '#/components/responses/CirQitError400'
        "401":
          $ref: '#/components/responses/CirQitError401'
        "403":
          $ref: '#/components/responses/CirQitError403'
        "404":
          $ref: '#/components/responses/CirQitError409'
        "405":
          $ref: '#/components/responses/CirQitError405'
        "409":
          $ref: '#/components/responses/CirQitError405'
        "500":
          $ref: '#/components/responses/CirQitError500'
      x-amazon-apigateway-integration:
        uri: ### OpenApiFunction ###
        httpMethod: POST
        type: aws_proxy


#  ################################################### #
#  #                                COMPONENTS                                                  # #
#  ################################################### #
components:
  schemas:

    IdSchema:
      type: string
      description: The ID of the object
      pattern: '^[A-Z0-9]{5}-[A-Z0-9]{5}$'
      example: ABCDE-12345

    Company:
      type: object
      description: The Company data
      required:
        - companyName
      properties:
        companyName:
          type: string
          example: Example Ltd.
        addition:
          type: string
          example: Postfach
        street:
          type: string
          example: die strasse
        postalCode:
          type: string
          example: "8400"
        city:
          type: string
          example: Winterthur
        country:
          type: string
          example: Schweiz
        phone:
          type: string
          example: "0785556677"
        email:
          type: string
          format: email
          example: info@example.com
        website:
          type: string
          example: www.example.com
        commission:
          type: array
          description: the comissioners of the company
          example: ["Project 3730", "Project 9382"]
          items:
            type: string

    Directory:
      type: object
      description: the directory object which can hold a installation or another directory
      required:
        - name
      properties:
        name:
          type: string
          example: Project on the street
          description: the name of the directory
        description:
          type: string
          example: a description of the directory
          description: the description of the directory
        parentId:
          type: string
          example: KLMNO-98765
          description: the ID of the parent directory

        accountId:
          type: string
          readOnly: true
          example: mario
          description: the accountID of the user who created the directory
        role:
          type: string
          readOnly: true
          example: ADMINISTRATOR
          description: the role of this user in this directory
        id:
          type: string
          readOnly: true
          example: FGHIJ-67890
          description: the ID of the directory
        installations:
          type: array
          readOnly: true
          description: the installations in this directory
          items:
            type: string
            example: ABCDE-12345
            description: the ID of the installation
        children:
          type: array
          readOnly: true
          description: the children directories in this directory
          items:
            $ref: '#/components/schemas/Directory'




    Installation:
      type: object
      description: the Installation object
      required:
        - name
        - licenseType
        - companyName
        - commission
        - rootId
        - parentId
        - accountId
      properties:
        name:
          type: string
          example: 2737_H1 Pelletanlage Hauptsteuerung Silosteuerung_V004
        description:
          type: string
          example: 2737_H1 Pelletanlage Hauptsteuerung Silosteuerung_V004
        licenseType:
          type: string
          example: public
        commission:
          type: string
          example: Hase
        address:
          type: string
          example: 82256 Fürstenfeldbruck, Deutschland
        location:
          description: the GEO location of the installation
          type: object
          example: { "latitude": 48.17394, "longitude": 11.243008 }
          properties:
            latitude:
              type: number
              format: float
              example: 48.17394
            longitude:
              type: number
              format: float
              example: 11.243008
        id:
          type: string
          example: ABCDE-12345
        companyName:
          type: string
          example: Huber AG
        rootId:
          type: string
          example: FGHIJ-56789
        parentId:
          type: string
          example: KLMNO-98765
        accountId:
          type: string
          example: mario
        role:
          type: string
          readOnly: true
          example: ADMIN
        createdDate:
          type: string
          readOnly: true
          format: date-time
          description: Creation date in the cirQit environment of the installation in ISO 8601 format "YYYY-MM-DDTHH:MM:SS".
          example: "2023-09-05T21:12:18"

    DocumentMetadata:
      type: object
      description: the metadata of the document stored in the AWS S3 bucket
      required:
        - fileName
        - documentType
      properties:
        fileName:
          type: string
          description: alphanumeric name of the document.
          example: my-file.txt
        documentType:
          type: string
          description: Type of the document in the installation.
          enum:
            - ATTACHMENT
            - SCHEMA
          example: ATTACHMENT
        displayName:
          type: string
          description: display name of the document.
          example: My File
        description:
          type: string
          description: details of the document content
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
        locked:
          type: boolean
          description: whether the document is visible for Admins (true) only or open for everybody (false)
          example: true
        installationId:
          type: string
          readOnly: true
          description: installationID related to the document.
          example: ABCDE-12345
        path:
          type: string
          description: slash delimited path of the directory where the document is stored.
          example: folder/subfolder1/subfolder2
        versions:
          type: array
          description: List of version objects containing version information
          items:
            $ref: '#/components/schemas/DocumentVersion'

    DocumentVersion:
      type: object
      description: |
        Version information of the document. 
        At the time being, only the versionId "latest" is supported. 
        There will be support for more version coming soon.
      required:
        - version
        - size
        - createdDate
      properties:
        versionId:
          type: string
          description: The versionId of the document
          example: abcd1234EFGH5678jklm
        size:
          type: number
          description: Size of the document in bytes
          example: 123456
        mimeType:
          type: string
          description: Mime type of the document.
          example: application/pdf
        createdDate:
          type: string
          format: date-time
          description: Creation date in the cirQit environment of the document in ISO 8601 format "YYYY-MM-DDTHH:MM:SS"
          example: "2023-09-05T21:12:18"

    Document:
      oneOf:
        - $ref: '#/components/schemas/AttachmentDocument'
        - $ref: '#/components/schemas/SchemaDocument'

    AttachmentDocument:
      type: object
      title: AttachmentDocument
      description: Attachment document type
      required:
        - documentType
        - fileName
        - path
        - action
      properties:
        documentType:
          type: string
          description: Type of the document in the installation.
          enum:
            - ATTACHMENT
          example: ATTACHMENT
        fileName:
          type: string
          description: name of the document.
          example: my-file.txt
        path:
          type: string
          description: slash delimited path of the directory where the document is stored.
          example: folder/subfolder1/subfolder2
        description:
          type: string
          description: description of the document.
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
        locked:
          type: boolean
          description: whether the document is visible for Admins only (true) or open for everybody (false)
          example: true
        action:
          type: string
          description: Action to be performed on the document.
          enum:
            - UPLOAD
            - DOWNLOAD
            - OVERWRITE
            - DELETE
          example: UPLOAD
        version:
          type: string
          description: |
            Version of the document. The version is provided in the response of the DocumentMetadata. 
            If the version is not provided, the latest version is used.
          example: abcd1234EFGH5678jklm

    SchemaDocument:
      type: object
      title: SchemaDocument
      description: Schema document type
      required:
        - documentType
        - action
      properties:
        documentType:
          type: string
          description: Type of the document in the installation.
          enum:
            - SCHEMA
          example: SCHEMA
        action:
          type: string
          description: Action to be performed on the document.
          enum:
            - UPLOAD
            - DOWNLOAD
            - OVERWRITE
            - DELETE
          example: UPLOAD
        version:
          type: string
          description: |
            Version of the schema. The version is provided in the response of the DocumentMetadata. 
            If the version is not provided, the latest version is used.
            With the version ORIGINAL, the uploaded schema is used.
          enum:
            - ORIGINAL
            - LATEST
          default: LATEST
          example: abcd1234EFGH5678jklm
          pattern: '^(ORIGINAL|LATEST|.*)$'


    SignedUrl:
      type: string
      description: get the signed URL to communicate with the AWS S3 bucket store
      example: https://app.cirqit.cloud/data/anlage/MHXKN-XSDUA/pdf/schema.pdf?Expires=173xxxx&Signature=1iOxxxx&Key-Pair-Id=K2Gxxxx


    CirQitError:
      description: >-
        Error object for cirQit API. This object is used to return error messages in case of an error.
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: string
          example: VALIDATION_ERROR
          description: Unique error code.
        errorMessage:
          type: string
          example: Input validation failed
          description: Short description of the error.
        errorReasons:
          example: [{ "message": "Attribute 'xxxx' must not be longer than 50 chars.", "code": "ERROR_012", "location": "/rootLevel/xxxx" }]
          type: array
          items:
            type: object
            required:
              - message
              - code
            properties:
              message:
                type: string
                example: Attribute 'xxxx' must not be longer than 50 chars.
              code:
                type: string
                example: ERROR_012
                description: Unique reason code for this specific reason.
              location:
                type: string
                example: /rootLevel/xxxx
                description: Location within message where the error is related to.
          description: >-
            List of error reasons if multiple reasons are related to the same error.
  
  

  responses:
    CirQitError400:
      description: Bad request, e.g. missing or invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError401:
      description: Unauthorized, no access to the requested url / resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError403:
      description: Forbidden, no access to the resource object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError404:
      description: Requested resource is not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError405:
      description: Path or HTTP method not available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError409:
      description: Resource already registered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'
    CirQitError500:
      description: Server error, e.g. internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CirQitError'

externalDocs:
  description: Developer documentation for cirQit OpenAPI
  url: https://www.cirqit.cloud/openAPI
